<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:beans="http://www.springframework.org/schema/beans"
   xmlns:context="http://www.springframework.org/schema/context"
   xmlns:task="http://www.springframework.org/schema/task"
   xmlns:tx="http://www.springframework.org/schema/tx"
   xmlns:aop="http://www.springframework.org/schema/aop"
   xmlns:websocket="http://www.springframework.org/schema/websocket"
   xsi:schemaLocation="http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.3.xsd
      http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
      http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
      http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
      http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
      http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

  
  <!-- 컨트롤러를 스캔하여 자동으로 빈으로 등록하는 설정 -->
    <context:component-scan base-package="fp.art.stroke.admin.controller" />
 
 
   <!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
   
   <!-- Enables the Spring MVC @Controller programming model -->
   <annotation-driven />

   <!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
   <resources mapping="/resources/**" location="/resources/" />
   <!-- 
      servlet-context.xml 파일
      -DispatcherServlet의 설정파일
      - 모든 요청을 받아서 Controller 찾고, 응답에 따라 View를 찾아서 연결
      * HandlerMapping: 요청받은 주소에 따라 해당 주소를 처리할 컨트롤러를 연결하는 역할
      ->기존에 xml 방식을 사용하다
      @RequestMapping / @GetMapping/@PostMapping으로 대체됨
      
    -->
    
    <!-- View Resolver :
       - Controller에서 반환된 문자열 앞/뒤에 prefix/suffix를 추가하여
       만들어진 경로의 jsp로 요청 위임(forward)
       
       member/signUp-> /WEB-INF/views/member/signUp.jsp
       단, 반환된 문자열의 시작이 redirect: 구문이면 (redirect) 진행
     -->
   <!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
   <beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
      <beans:property name="prefix" value="/WEB-INF/views/" />
      <beans:property name="suffix" value=".jsp" />
   </beans:bean>
   
    
   <!-- 지정된 패키지 이하에 존재하는
      @Component, @Controller, @Service, @Repository를 찾아서 bean으로 생성 
   -->
   <context:component-scan base-package="fp.art.stroke" />
   <!-- 인터셉터 만들어야함 -->
   <!-- interceptors :인터셉터를 모아둔 태그 -->
    <interceptors>
    <!--interceptor: 요청이 Dispatcher Servlet에서 Controller에 도달하기 전 또는 후에 요청/ 응답 객체(req, resp)를 가로채서 사용할 수 있는 객체  -->
    <interceptor>
    <!-- /** 은 모든 요청, /*은 /member이나 한차례..? -->
    <mapping path="/**"/>
       <!-- 가로챌 요청의 패턴을 지정 -->
       <beans:bean id = "boardTypeInterceptor" class ="fp.art.stroke.common.interceptor.BoardTypeInterceptor"/>
       
    </interceptor>
    
    <interceptor>
       <mapping path="/admin/**" />
       <beans:bean id = "AdminInterceptor" class ="fp.art.stroke.common.interceptor.AdminInterceptor"/>
    </interceptor>
    </interceptors>
   
   <!--    <tx:annotation-driven proxy-target-class="true"/> -->
   <tx:annotation-driven transaction-manager="transactionManager"/>
   <!-- @Scheduled 어노테이션 인식을 위한 태그 -->
   <task:annotation-driven/>
   <!-- aop auto proxy -->
   <aop:aspectj-autoproxy proxy-target-class="false"/>
   <!--  proxy- target-class :프록시가 적용될 클래스가 인터페이스면
   false -> Spring aop는 기본적으로 인터페이스를 상속받은 프록시가 생성되어 코드를 수행함
   일반 클래스면 true -> cglib 라이브러리를 이용해서 일반 클래스를 상속받아 프록시 생성 -->

 

<!-- 회원가입 메일 인증 ey gmail 06/12-->
<beans:bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
   <beans:property name="host" value="smtp.gmail.com"/>
   <beans:property name="port" value="587"/>
   <beans:property name="username" value="unn3290@gmail.com"/>
   <beans:property name="password" value=""/>
   <beans:property name="defaultEncoding" value="utf-8"/>
   <beans:property name="javaMailProperties">
      <beans:props>
         <beans:prop key="mail.transport.protocol">smtp</beans:prop>
         <beans:prop key="mail.smtp.auth">true</beans:prop>
         <beans:prop key="mail.smtp.starttls.enable">true</beans:prop>
         <beans:prop key="mail.debug">true</beans:prop>
      </beans:props>
   </beans:property>
</beans:bean>
 
<!-- appkey.properties를 사용하기위한 빈 등록: 프로퍼티 파일 정보를 스프링에서 사용할 수 있도록 해주는 PropertyPlaceholderConfigurer 클래스 -->
<beans:bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <beans:property name="locations" value="classpath:spring/appkey.properties" />
</beans:bean>

<!-- google Class Bean설정 추가 0622 ey-->
<!-- 클라이언트ID와 보안비밀 세팅-->
<beans:bean id="googleConnectionFactory"
   class="org.springframework.social.google.connect.GoogleConnectionFactory">
   <beans:constructor-arg value="" />
   <beans:constructor-arg value="" />
</beans:bean>
<!-- 승인된 자바스크립트 원본과 승인된 리디렉션 URI -->
<beans:bean id="googleOAuth2Parameters" class="org.springframework.social.oauth2.OAuth2Parameters">
   <beans:property name="scope" value="https://www.googleapis.com/auth/plus.login" />
   <beans:property name="redirectUri" value="http://localhost:8080/googleCallback" />
</beans:bean>

<!--naverLoginBO class에 대한 bean설정 추가-->
<beans:bean id="naverLoginBO" class="fp.art.stroke.member.auth.bo.NaverLoginBO" />
<!-- kakaoLoginBO -->
<beans:bean id="kakaoLoginBO" class="fp.art.stroke.member.auth.bo.KakaoLoginBO" />
 
</beans:beans>
